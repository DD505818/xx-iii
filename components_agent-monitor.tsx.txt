"use client"

import { useCallback, useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Activity, AlertCircle, Ban, Play, Power, RefreshCw } from 'lucide-react'
import { useWebSocket } from '@/hooks/use-websocket'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer
} from 'recharts'

interface AgentMetrics {
  id: string
  name: string
  status: 'active' | 'idle' | 'error'
  performance: number
  trades: number
  winRate: number
  pnl: number
  latency: number
  metrics: Array<{
    timestamp: number
    performance: number
    pnl: number
  }>
}

function AgentCard({ agent }: { agent: AgentMetrics }) {
  const metrics = useMemo(() => {
    return agent.metrics.map(m => ({
      ...m,
      timestamp: new Date(m.timestamp).toLocaleTimeString(),
    }))
  }, [agent.metrics])

  const statusColor = {
    active: 'bg-green-500',
    idle: 'bg-yellow-500',
    error: 'bg-red-500'
  }[agent.status]

  return (
    <Card className="glass-panel">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className={`h-2 w-2 rounded-full ${statusColor}`} />
            <CardTitle className="text-sm font-medium">{agent.name}</CardTitle>
          </div>
          <Badge variant="outline" className="text-xs">
            {agent.latency}ms
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="h-[100px] mt-4">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={metrics}>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis
                dataKey="timestamp"
                stroke="rgba(255,255,255,0.5)"
                tickFormatter={(value) => value.split(':')[1]}
              />
              <YAxis stroke="rgba(255,255,255,0.5)" />
              <Tooltip
                contentStyle={{
                  backgroundColor: 'rgba(0,0,0,0.8)',
                  border: '1px solid rgba(255,255,255,0.1)'
                }}
              />
              <Line
                type="monotone"
                dataKey="performance"
                stroke="hsl(var(--primary))"
                strokeWidth={2}
                dot={false}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
        <div className="grid grid-cols-4 gap-2 mt-4">
          <div className="text-center">
            <div className="text-xs text-muted-foreground">Win Rate</div>
            <div className="text-sm font-bold">{agent.winRate}%</div>
          </div>
          <div className="text-center">
            <div className="text-xs text-muted-foreground">Trades</div>
            <div className="text-sm font-bold">{agent.trades}</div>
          </div>
          <div className="text-center">
            <div className="text-xs text-muted-foreground">P&L</div>
            <div className="text-sm font-bold">${agent.pnl.toFixed(2)}</div>
          </div>
          <div className="text-center">
            <div className="text-xs text-muted-foreground">Perf</div>
            <div className="text-sm font-bold">{agent.performance}%</div>
          </div>
        </div>
        <div className="flex justify-end gap-2 mt-4">
          <Button variant="outline" size="sm">
            <RefreshCw className="h-4 w-4" />
          </Button>
          <Button variant="outline" size="sm">
            {agent.status === 'active' ? (
              <Ban className="h-4 w-4" />
            ) : (
              <Play className="h-4 w-4" />
            )}
          </Button>
          <Button variant="outline" size="sm">
            <Power className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

export function AgentMonitor() {
  const { data } = useWebSocket('wss://api.exchange.com/agents')

  const agents = useMemo(() => {
    return data?.agents || []
  }, [data])

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
      {agents.map((agent: AgentMetrics) => (
        <AgentCard key={agent.id} agent={agent} />
      ))}
    </div>
  )
}

